#include <utility>
#include <random>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <math.h>
using namespace std;

int random() {
    random_device rd;
    mt19937 gen(rd());
    uniform_real_distribution<> dis(1, 100);
    return dis(gen);
}

int diferencia_eucladiana(vector<int>vector_1, vector<int>vector_2, int dimensiones) {
    int temp = 0, temp1 = 0;
    for (int i = 0; i < dimensiones; i++) {
        //cout << "---------------------------------------------comparamos " << vector_1[i] << " con " << vector_2[i] << endl;
        temp1 = vector_1[i] - vector_2[i];
        temp1 *= temp1;
        temp += temp1;
    }
    temp = sqrt(temp);
    //cout << "---------------------------------------------la distancia es " << temp << endl << endl;
    return temp;
}

void imprimir_distancias(vector< pair <int, int> > distancias) {

    for (int i = 0; i < distancias.size(); i++)
    {
        cout << distancias[i].first << " " << distancias[i].second << endl;
    }
    cout << endl;
}

void imprimir(vector<vector<int> > myvector, int dimensiones, int datos) {
    for (double i = 0; i < datos; i++) {
        for (double j = 0; j < dimensiones; j++) {
            cout << myvector[i][j] << " ";
        }
        cout << endl;
    }
}


void rellenar(vector<vector<int> >& todo, int dimension, int datos) {
    for (int i = 0; i< datos; i++) {
        for (int j = 0; j<dimension; j++) {
            todo[i][j] = random();
        }
    }
}

int find_(vector<pair<int, int> >& distancias, int dato_a_buscar) {
    for (int i = 0; i < distancias.size(); i++) {
        if (distancias[i].first == dato_a_buscar) {
            return i;
        }
    }
    return -1;
}

void distancia(vector<vector<int> >& todo, vector<pair<int, int> >& distancias, int dimensiones, int datos) {
    int dis;
    int encontro;
    for (int indice = 0, i = 1; i < datos; i++) {

        dis = diferencia_eucladiana(todo[indice], todo[i], dimensiones);
        encontro = find_(distancias, dis);
        if (encontro == -1) {
            distancias.push_back(pair<int, int>({ dis,1 }));
        }

        else {
            distancias[encontro].second++;
        }

    }
    //cout << distancias.size() << endl;
}

bool sortbysecdesc(const pair<int, int>& a,
    const pair<int, int>& b)
{
    return a.first < b.first;
}

int main() {
    /*int datos = 5;
    vector<vector<int> > dim(20000, vector<int>(datos));
    vector< pair <int, int> > distancias;
    int dimensiones[] = { 1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100 };
    int prueba[] = {1,2};
    int tam_arreglo = sizeof(dimensiones) / sizeof(dimensiones[0]);
    int tam_arreglo2 = sizeof(prueba) / sizeof(prueba[0]);
    for (int i = 0; i < tam_arreglo2; i++) {
        rellenar(dim, tam_arreglo2, datos);
        imprimir(dim, prueba[i], datos);
        distancia(dim, distancias, prueba[i], datos);
        cout << "-------------------------distancias de " << prueba[i] << " dimensiones" << endl;
        sort(distancias.begin(), distancias.end(), sortbysecdesc);
        imprimir_distancias(distancias);
        distancias.clear();
    }*/
    

    int datos = 20000;
    vector<vector<int> > dim(20000, vector<int>(datos));
    vector< pair <int, int> > distancias;
    int prueba[] = {100};
    int tam_arreglo2 = sizeof(prueba) / sizeof(prueba[0]);
    //for (int i = 0; i < tam_arreglo2; i++) {
        rellenar(dim, prueba[0], datos);
        //imprimir(dim, prueba[0], datos);
        distancia(dim, distancias, prueba[0], datos);
        cout << "-------------------------distancias de " << prueba[0] << " dimensiones" << endl;
        sort(distancias.begin(), distancias.end(), sortbysecdesc);
        imprimir_distancias(distancias);
        distancias.clear();
    //}
}


